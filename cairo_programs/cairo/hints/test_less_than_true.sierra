type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u32, 12> = Const<u32, 12> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 10> = Const<u32, 10> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<u32, 10>> = const_as_immediate<Const<u32, 10>>;
libfunc const_as_immediate<Const<u32, 12>> = const_as_immediate<Const<u32, 12>>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc branch_align = branch_align;
libfunc drop<u32> = drop<u32>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;

const_as_immediate<Const<u32, 10>>() -> ([1]); // 0
const_as_immediate<Const<u32, 12>>() -> ([2]); // 1
store_temp<u32>([1]) -> ([1]); // 2
store_temp<u32>([2]) -> ([2]); // 3
u32_overflowing_sub([0], [1], [2]) { fallthrough([3], [4]) 12([5], [6]) }; // 4
branch_align() -> (); // 5
drop<u32>([4]) -> (); // 6
struct_construct<Unit>() -> ([7]); // 7
enum_init<core::bool, 0>([7]) -> ([8]); // 8
store_temp<RangeCheck>([3]) -> ([3]); // 9
store_temp<core::bool>([8]) -> ([8]); // 10
return([3], [8]); // 11
branch_align() -> (); // 12
drop<u32>([6]) -> (); // 13
struct_construct<Unit>() -> ([9]); // 14
enum_init<core::bool, 1>([9]) -> ([10]); // 15
store_temp<RangeCheck>([5]) -> ([5]); // 16
store_temp<core::bool>([10]) -> ([10]); // 17
return([5], [10]); // 18

test_less_than::test_less_than::main@0([0]: RangeCheck) -> (RangeCheck, core::bool);
