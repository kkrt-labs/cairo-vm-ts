type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Tuple<core::bool, core::bool> = Struct<ut@Tuple, core::bool, core::bool> [storable: true, drop: true, dup: true, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type Const<u32, 12> = Const<u32, 12> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u32, 10> = Const<u32, 10> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<u32, 10>> = const_as_immediate<Const<u32, 10>>;
libfunc const_as_immediate<Const<u32, 12>> = const_as_immediate<Const<u32, 12>>;
libfunc dup<u32> = dup<u32>;
libfunc store_temp<u32> = store_temp<u32>;
libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc branch_align = branch_align;
libfunc drop<u32> = drop<u32>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc jump = jump;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc struct_construct<Tuple<core::bool, core::bool>> = struct_construct<Tuple<core::bool, core::bool>>;
libfunc store_temp<Tuple<core::bool, core::bool>> = store_temp<Tuple<core::bool, core::bool>>;
libfunc u32_bitwise = u32_bitwise;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;

const_as_immediate<Const<u32, 10>>() -> ([1]); // 0
const_as_immediate<Const<u32, 12>>() -> ([2]); // 1
dup<u32>([1]) -> ([1], [3]); // 2
dup<u32>([2]) -> ([2], [4]); // 3
store_temp<u32>([3]) -> ([3]); // 4
store_temp<u32>([4]) -> ([4]); // 5
u32_overflowing_sub([0], [3], [4]) { fallthrough([5], [6]) 14([7], [8]) }; // 6
branch_align() -> (); // 7
drop<u32>([6]) -> (); // 8
struct_construct<Unit>() -> ([9]); // 9
enum_init<core::bool, 0>([9]) -> ([10]); // 10
store_temp<RangeCheck>([5]) -> ([11]); // 11
store_temp<core::bool>([10]) -> ([12]); // 12
jump() { 20() }; // 13
branch_align() -> (); // 14
drop<u32>([8]) -> (); // 15
struct_construct<Unit>() -> ([13]); // 16
enum_init<core::bool, 1>([13]) -> ([14]); // 17
store_temp<RangeCheck>([7]) -> ([11]); // 18
store_temp<core::bool>([14]) -> ([12]); // 19
store_temp<u32>([2]) -> ([2]); // 20
store_temp<u32>([1]) -> ([1]); // 21
u32_overflowing_sub([11], [2], [1]) { fallthrough([15], [16]) 30([17], [18]) }; // 22
branch_align() -> (); // 23
drop<u32>([16]) -> (); // 24
struct_construct<Unit>() -> ([19]); // 25
enum_init<core::bool, 0>([19]) -> ([20]); // 26
store_temp<RangeCheck>([15]) -> ([21]); // 27
store_temp<core::bool>([20]) -> ([22]); // 28
jump() { 36() }; // 29
branch_align() -> (); // 30
drop<u32>([18]) -> (); // 31
struct_construct<Unit>() -> ([23]); // 32
enum_init<core::bool, 1>([23]) -> ([24]); // 33
store_temp<RangeCheck>([17]) -> ([21]); // 34
store_temp<core::bool>([24]) -> ([22]); // 35
struct_construct<Tuple<core::bool, core::bool>>([12], [22]) -> ([25]); // 36
store_temp<RangeCheck>([21]) -> ([21]); // 37
store_temp<Tuple<core::bool, core::bool>>([25]) -> ([25]); // 38
return([21], [25]); // 39
const_as_immediate<Const<u32, 12>>() -> ([1]); // 40
const_as_immediate<Const<u32, 10>>() -> ([2]); // 41
store_temp<u32>([1]) -> ([1]); // 42
store_temp<u32>([2]) -> ([2]); // 43
u32_bitwise([0], [1], [2]) -> ([3], [4], [5], [6]); // 44
drop<u32>([4]) -> (); // 45
drop<u32>([6]) -> (); // 46
store_temp<Bitwise>([3]) -> ([3]); // 47
store_temp<u32>([5]) -> ([5]); // 48
return([3], [5]); // 49

multiple_fn::multiple_fn::main@0([0]: RangeCheck) -> (RangeCheck, Tuple<core::bool, core::bool>);
multiple_fn::multiple_fn::foo@40([0]: Bitwise) -> (Bitwise, u32);
