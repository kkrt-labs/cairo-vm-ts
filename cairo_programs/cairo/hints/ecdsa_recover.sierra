type felt252 = felt252 [storable: true, drop: true, dup: true, zero_sized: false];
type u128 = u128 [storable: true, drop: true, dup: true, zero_sized: false];
type core::integer::u512 = Struct<ut@core::integer::u512, u128, u128, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type EcPoint = EcPoint [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<EcPoint> = NonZero<EcPoint> [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>> = Enum<ut@core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>, NonZero<EcPoint>, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type EcState = EcState [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 340282366920938463463374607431768211456> = Const<felt252, 340282366920938463463374607431768211456> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 10633823966279327296825105735305134080> = Const<u128, 10633823966279327296825105735305134080> [storable: false, drop: false, dup: false, zero_sized: false];
type U128MulGuarantee = U128MulGuarantee [storable: true, drop: false, dup: false, zero_sized: false];
type core::integer::u256 = Struct<ut@core::integer::u256, u128, u128> [storable: true, drop: true, dup: true, zero_sized: false];
type NonZero<core::integer::u256> = NonZero<core::integer::u256> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 3618502788666131213697322783095070105526743751716087489154079457884512865583> = Const<felt252, 3618502788666131213697322783095070105526743751716087489154079457884512865583> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 0> = Const<u128, 0> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 152666792071518830868575557812948353041420400780739481342941381225525861407> = Const<felt252, 152666792071518830868575557812948353041420400780739481342941381225525861407> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 874739451078007766457464989774322083649278607533249481151382481072868806602> = Const<felt252, 874739451078007766457464989774322083649278607533249481151382481072868806602> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<u128, 1> = Const<u128, 1> [storable: false, drop: false, dup: false, zero_sized: false];
type core::panics::Panic = Struct<ut@core::panics::Panic> [storable: true, drop: true, dup: true, zero_sized: true];
type Array<felt252> = Array<felt252> [storable: true, drop: true, dup: false, zero_sized: false];
type Tuple<core::panics::Panic, Array<felt252>> = Struct<ut@Tuple, core::panics::Panic, Array<felt252>> [storable: true, drop: true, dup: false, zero_sized: false];
type Const<felt252, 29721761890975875353235833581453094220424382983267374> = Const<felt252, 29721761890975875353235833581453094220424382983267374> [storable: false, drop: false, dup: false, zero_sized: false];
type Tuple<felt252> = Struct<ut@Tuple, felt252> [storable: true, drop: true, dup: true, zero_sized: false];
type core::panics::PanicResult::<(core::felt252,)> = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, Tuple<felt252>, Tuple<core::panics::Panic, Array<felt252>>> [storable: true, drop: true, dup: false, zero_sized: false];
type core::option::Option::<core::felt252> = Enum<ut@core::option::Option::<core::felt252>, felt252, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Bitwise = Bitwise [storable: true, drop: false, dup: false, zero_sized: false];
type EcOp = EcOp [storable: true, drop: false, dup: false, zero_sized: false];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];
type core::bool = Enum<ut@core::bool, Unit, Unit> [storable: true, drop: true, dup: true, zero_sized: false];
type Const<felt252, 2925335700420068477532893136360799683220922576143466479208174349948949078517> = Const<felt252, 2925335700420068477532893136360799683220922576143466479208174349948949078517> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 336742005567258698661916498343089167447076063081786685068305785816009957563> = Const<felt252, 336742005567258698661916498343089167447076063081786685068305785816009957563> [storable: false, drop: false, dup: false, zero_sized: false];
type Const<felt252, 141784621858361645174009804296757185726381639603648306606182704733930666796> = Const<felt252, 141784621858361645174009804296757185726381639603648306606182704733930666796> [storable: false, drop: false, dup: false, zero_sized: false];

libfunc const_as_immediate<Const<felt252, 141784621858361645174009804296757185726381639603648306606182704733930666796>> = const_as_immediate<Const<felt252, 141784621858361645174009804296757185726381639603648306606182704733930666796>>;
libfunc const_as_immediate<Const<felt252, 336742005567258698661916498343089167447076063081786685068305785816009957563>> = const_as_immediate<Const<felt252, 336742005567258698661916498343089167447076063081786685068305785816009957563>>;
libfunc const_as_immediate<Const<felt252, 2925335700420068477532893136360799683220922576143466479208174349948949078517>> = const_as_immediate<Const<felt252, 2925335700420068477532893136360799683220922576143466479208174349948949078517>>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<EcOp> = store_temp<EcOp>;
libfunc store_temp<Bitwise> = store_temp<Bitwise>;
libfunc store_temp<felt252> = store_temp<felt252>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc function_call<user@core::ecdsa::recover_public_key> = function_call<user@core::ecdsa::recover_public_key>;
libfunc enum_match<core::option::Option::<core::felt252>> = enum_match<core::option::Option::<core::felt252>>;
libfunc branch_align = branch_align;
libfunc struct_construct<Tuple<felt252>> = struct_construct<Tuple<felt252>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 0> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>;
libfunc store_temp<core::panics::PanicResult::<(core::felt252,)>> = store_temp<core::panics::PanicResult::<(core::felt252,)>>;
libfunc drop<Unit> = drop<Unit>;
libfunc array_new<felt252> = array_new<felt252>;
libfunc const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>> = const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>;
libfunc array_append<felt252> = array_append<felt252>;
libfunc struct_construct<core::panics::Panic> = struct_construct<core::panics::Panic>;
libfunc struct_construct<Tuple<core::panics::Panic, Array<felt252>>> = struct_construct<Tuple<core::panics::Panic, Array<felt252>>>;
libfunc enum_init<core::panics::PanicResult::<(core::felt252,)>, 1> = enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>;
libfunc dup<felt252> = dup<felt252>;
libfunc ec_point_from_x_nz = ec_point_from_x_nz;
libfunc store_temp<NonZero<EcPoint>> = store_temp<NonZero<EcPoint>>;
libfunc unwrap_non_zero<EcPoint> = unwrap_non_zero<EcPoint>;
libfunc dup<EcPoint> = dup<EcPoint>;
libfunc ec_point_is_zero = ec_point_is_zero;
libfunc drop<felt252> = drop<felt252>;
libfunc drop<core::bool> = drop<core::bool>;
libfunc drop<EcPoint> = drop<EcPoint>;
libfunc enum_init<core::option::Option::<core::felt252>, 1> = enum_init<core::option::Option::<core::felt252>, 1>;
libfunc store_temp<core::option::Option::<core::felt252>> = store_temp<core::option::Option::<core::felt252>>;
libfunc ec_point_unwrap = ec_point_unwrap;
libfunc u128s_from_felt252 = u128s_from_felt252;
libfunc store_temp<u128> = store_temp<u128>;
libfunc jump = jump;
libfunc drop<u128> = drop<u128>;
libfunc const_as_immediate<Const<u128, 1>> = const_as_immediate<Const<u128, 1>>;
libfunc bitwise = bitwise;
libfunc u128_eq = u128_eq;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc snapshot_take<core::bool> = snapshot_take<core::bool>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc bool_not_impl = bool_not_impl;
libfunc store_temp<EcPoint> = store_temp<EcPoint>;
libfunc ec_neg = ec_neg;
libfunc const_as_immediate<Const<felt252, 874739451078007766457464989774322083649278607533249481151382481072868806602>> = const_as_immediate<Const<felt252, 874739451078007766457464989774322083649278607533249481151382481072868806602>>;
libfunc const_as_immediate<Const<felt252, 152666792071518830868575557812948353041420400780739481342941381225525861407>> = const_as_immediate<Const<felt252, 152666792071518830868575557812948353041420400780739481342941381225525861407>>;
libfunc ec_point_try_new_nz = ec_point_try_new_nz;
libfunc const_as_immediate<Const<u128, 0>> = const_as_immediate<Const<u128, 0>>;
libfunc const_as_immediate<Const<felt252, 3618502788666131213697322783095070105526743751716087489154079457884512865583>> = const_as_immediate<Const<felt252, 3618502788666131213697322783095070105526743751716087489154079457884512865583>>;
libfunc struct_construct<core::integer::u256> = struct_construct<core::integer::u256>;
libfunc store_temp<core::integer::u256> = store_temp<core::integer::u256>;
libfunc u256_is_zero = u256_is_zero;
libfunc drop<core::integer::u256> = drop<core::integer::u256>;
libfunc dup<NonZero<core::integer::u256>> = dup<NonZero<core::integer::u256>>;
libfunc u256_guarantee_inv_mod_n = u256_guarantee_inv_mod_n;
libfunc u128_mul_guarantee_verify = u128_mul_guarantee_verify;
libfunc unwrap_non_zero<core::integer::u256> = unwrap_non_zero<core::integer::u256>;
libfunc dup<core::integer::u256> = dup<core::integer::u256>;
libfunc store_temp<NonZero<core::integer::u256>> = store_temp<NonZero<core::integer::u256>>;
libfunc function_call<user@core::math::u256_mul_mod_n> = function_call<user@core::math::u256_mul_mod_n>;
libfunc struct_deconstruct<core::integer::u256> = struct_deconstruct<core::integer::u256>;
libfunc const_as_immediate<Const<u128, 10633823966279327296825105735305134080>> = const_as_immediate<Const<u128, 10633823966279327296825105735305134080>>;
libfunc dup<u128> = dup<u128>;
libfunc u128_overflowing_sub = u128_overflowing_sub;
libfunc drop<NonZero<core::integer::u256>> = drop<NonZero<core::integer::u256>>;
libfunc u128_to_felt252 = u128_to_felt252;
libfunc const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>> = const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>;
libfunc felt252_mul = felt252_mul;
libfunc felt252_add = felt252_add;
libfunc ec_state_init = ec_state_init;
libfunc ec_state_add_mul = ec_state_add_mul;
libfunc store_temp<EcState> = store_temp<EcState>;
libfunc ec_state_try_finalize_nz = ec_state_try_finalize_nz;
libfunc ec_point_zero = ec_point_zero;
libfunc enum_init<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>, 1> = enum_init<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>, 1>;
libfunc store_temp<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>> = store_temp<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>;
libfunc enum_init<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>, 0> = enum_init<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>, 0>;
libfunc snapshot_take<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>> = snapshot_take<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>;
libfunc drop<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>> = drop<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>;
libfunc enum_match<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>> = enum_match<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>;
libfunc drop<NonZero<EcPoint>> = drop<NonZero<EcPoint>>;
libfunc ec_state_add = ec_state_add;
libfunc enum_init<core::option::Option::<core::felt252>, 0> = enum_init<core::option::Option::<core::felt252>, 0>;
libfunc u128_guarantee_mul = u128_guarantee_mul;
libfunc u128_overflowing_add = u128_overflowing_add;
libfunc struct_construct<core::integer::u512> = struct_construct<core::integer::u512>;
libfunc store_temp<core::integer::u512> = store_temp<core::integer::u512>;
libfunc u512_safe_divmod_by_u256 = u512_safe_divmod_by_u256;
libfunc drop<core::integer::u512> = drop<core::integer::u512>;

const_as_immediate<Const<felt252, 141784621858361645174009804296757185726381639603648306606182704733930666796>>() -> ([3]); // 0
const_as_immediate<Const<felt252, 336742005567258698661916498343089167447076063081786685068305785816009957563>>() -> ([4]); // 1
const_as_immediate<Const<felt252, 2925335700420068477532893136360799683220922576143466479208174349948949078517>>() -> ([5]); // 2
struct_construct<Unit>() -> ([6]); // 3
enum_init<core::bool, 0>([6]) -> ([7]); // 4
store_temp<RangeCheck>([0]) -> ([0]); // 5
store_temp<EcOp>([1]) -> ([1]); // 6
store_temp<Bitwise>([2]) -> ([2]); // 7
store_temp<felt252>([3]) -> ([3]); // 8
store_temp<felt252>([4]) -> ([4]); // 9
store_temp<felt252>([5]) -> ([5]); // 10
store_temp<core::bool>([7]) -> ([7]); // 11
function_call<user@core::ecdsa::recover_public_key>([0], [1], [2], [3], [4], [5], [7]) -> ([8], [9], [10], [11]); // 12
enum_match<core::option::Option::<core::felt252>>([11]) { fallthrough([12]) 22([13]) }; // 13
branch_align() -> (); // 14
struct_construct<Tuple<felt252>>([12]) -> ([14]); // 15
enum_init<core::panics::PanicResult::<(core::felt252,)>, 0>([14]) -> ([15]); // 16
store_temp<RangeCheck>([8]) -> ([8]); // 17
store_temp<EcOp>([9]) -> ([9]); // 18
store_temp<Bitwise>([10]) -> ([10]); // 19
store_temp<core::panics::PanicResult::<(core::felt252,)>>([15]) -> ([15]); // 20
return([8], [9], [10], [15]); // 21
branch_align() -> (); // 22
drop<Unit>([13]) -> (); // 23
array_new<felt252>() -> ([16]); // 24
const_as_immediate<Const<felt252, 29721761890975875353235833581453094220424382983267374>>() -> ([17]); // 25
store_temp<felt252>([17]) -> ([17]); // 26
array_append<felt252>([16], [17]) -> ([18]); // 27
struct_construct<core::panics::Panic>() -> ([19]); // 28
struct_construct<Tuple<core::panics::Panic, Array<felt252>>>([19], [18]) -> ([20]); // 29
enum_init<core::panics::PanicResult::<(core::felt252,)>, 1>([20]) -> ([21]); // 30
store_temp<RangeCheck>([8]) -> ([8]); // 31
store_temp<EcOp>([9]) -> ([9]); // 32
store_temp<Bitwise>([10]) -> ([10]); // 33
store_temp<core::panics::PanicResult::<(core::felt252,)>>([21]) -> ([21]); // 34
return([8], [9], [10], [21]); // 35
dup<felt252>([4]) -> ([4], [7]); // 36
ec_point_from_x_nz([0], [7]) { fallthrough([8], [9]) 446([10]) }; // 37
branch_align() -> (); // 38
store_temp<NonZero<EcPoint>>([9]) -> ([9]); // 39
unwrap_non_zero<EcPoint>([9]) -> ([11]); // 40
dup<EcPoint>([11]) -> ([11], [12]); // 41
store_temp<RangeCheck>([8]) -> ([8]); // 42
ec_point_is_zero([12]) { fallthrough() 57([13]) }; // 43
branch_align() -> (); // 44
drop<felt252>([5]) -> (); // 45
drop<core::bool>([6]) -> (); // 46
drop<felt252>([3]) -> (); // 47
drop<felt252>([4]) -> (); // 48
drop<EcPoint>([11]) -> (); // 49
struct_construct<Unit>() -> ([14]); // 50
enum_init<core::option::Option::<core::felt252>, 1>([14]) -> ([15]); // 51
store_temp<RangeCheck>([8]) -> ([8]); // 52
store_temp<EcOp>([1]) -> ([1]); // 53
store_temp<Bitwise>([2]) -> ([2]); // 54
store_temp<core::option::Option::<core::felt252>>([15]) -> ([15]); // 55
return([8], [1], [2], [15]); // 56
branch_align() -> (); // 57
ec_point_unwrap([13]) -> ([16], [17]); // 58
drop<felt252>([16]) -> (); // 59
u128s_from_felt252([8], [17]) { fallthrough([18], [19]) 65([20], [21], [22]) }; // 60
branch_align() -> (); // 61
store_temp<RangeCheck>([18]) -> ([23]); // 62
store_temp<u128>([19]) -> ([24]); // 63
jump() { 69() }; // 64
branch_align() -> (); // 65
drop<u128>([21]) -> (); // 66
store_temp<RangeCheck>([20]) -> ([23]); // 67
store_temp<u128>([22]) -> ([24]); // 68
const_as_immediate<Const<u128, 1>>() -> ([25]); // 69
store_temp<u128>([25]) -> ([25]); // 70
bitwise([2], [24], [25]) -> ([26], [27], [28], [29]); // 71
drop<u128>([28]) -> (); // 72
drop<u128>([29]) -> (); // 73
const_as_immediate<Const<u128, 1>>() -> ([30]); // 74
store_temp<u128>([27]) -> ([27]); // 75
store_temp<Bitwise>([26]) -> ([26]); // 76
u128_eq([27], [30]) { fallthrough() 83() }; // 77
branch_align() -> (); // 78
struct_construct<Unit>() -> ([31]); // 79
enum_init<core::bool, 0>([31]) -> ([32]); // 80
store_temp<core::bool>([32]) -> ([33]); // 81
jump() { 87() }; // 82
branch_align() -> (); // 83
struct_construct<Unit>() -> ([34]); // 84
enum_init<core::bool, 1>([34]) -> ([35]); // 85
store_temp<core::bool>([35]) -> ([33]); // 86
snapshot_take<core::bool>([33]) -> ([36], [37]); // 87
drop<core::bool>([36]) -> (); // 88
enum_match<core::bool>([37]) { fallthrough([38]) 94([39]) }; // 89
branch_align() -> (); // 90
drop<Unit>([38]) -> (); // 91
store_temp<core::bool>([6]) -> ([40]); // 92
jump() { 98() }; // 93
branch_align() -> (); // 94
drop<Unit>([39]) -> (); // 95
bool_not_impl([6]) -> ([41]); // 96
store_temp<core::bool>([41]) -> ([40]); // 97
enum_match<core::bool>([40]) { fallthrough([42]) 103([43]) }; // 98
branch_align() -> (); // 99
drop<Unit>([42]) -> (); // 100
store_temp<EcPoint>([11]) -> ([44]); // 101
jump() { 107() }; // 102
branch_align() -> (); // 103
drop<Unit>([43]) -> (); // 104
ec_neg([11]) -> ([45]); // 105
store_temp<EcPoint>([45]) -> ([44]); // 106
const_as_immediate<Const<felt252, 874739451078007766457464989774322083649278607533249481151382481072868806602>>() -> ([46]); // 107
const_as_immediate<Const<felt252, 152666792071518830868575557812948353041420400780739481342941381225525861407>>() -> ([47]); // 108
store_temp<felt252>([46]) -> ([46]); // 109
store_temp<felt252>([47]) -> ([47]); // 110
ec_point_try_new_nz([46], [47]) { fallthrough([48]) 434() }; // 111
branch_align() -> (); // 112
store_temp<NonZero<EcPoint>>([48]) -> ([48]); // 113
unwrap_non_zero<EcPoint>([48]) -> ([49]); // 114
u128s_from_felt252([23], [4]) { fallthrough([50], [51]) 122([52], [53], [54]) }; // 115
branch_align() -> (); // 116
const_as_immediate<Const<u128, 0>>() -> ([55]); // 117
store_temp<RangeCheck>([50]) -> ([56]); // 118
store_temp<u128>([51]) -> ([57]); // 119
store_temp<u128>([55]) -> ([58]); // 120
jump() { 126() }; // 121
branch_align() -> (); // 122
store_temp<RangeCheck>([52]) -> ([56]); // 123
store_temp<u128>([54]) -> ([57]); // 124
store_temp<u128>([53]) -> ([58]); // 125
const_as_immediate<Const<felt252, 3618502788666131213697322783095070105526743751716087489154079457884512865583>>() -> ([59]); // 126
struct_construct<core::integer::u256>([57], [58]) -> ([60]); // 127
store_temp<felt252>([59]) -> ([59]); // 128
store_temp<core::integer::u256>([60]) -> ([60]); // 129
u128s_from_felt252([56], [59]) { fallthrough([61], [62]) 137([63], [64], [65]) }; // 130
branch_align() -> (); // 131
const_as_immediate<Const<u128, 0>>() -> ([66]); // 132
store_temp<RangeCheck>([61]) -> ([67]); // 133
store_temp<u128>([62]) -> ([68]); // 134
store_temp<u128>([66]) -> ([69]); // 135
jump() { 141() }; // 136
branch_align() -> (); // 137
store_temp<RangeCheck>([63]) -> ([67]); // 138
store_temp<u128>([65]) -> ([68]); // 139
store_temp<u128>([64]) -> ([69]); // 140
struct_construct<core::integer::u256>([68], [69]) -> ([70]); // 141
store_temp<core::integer::u256>([70]) -> ([70]); // 142
u256_is_zero([70]) { fallthrough() 157([71]) }; // 143
branch_align() -> (); // 144
drop<EcPoint>([49]) -> (); // 145
drop<felt252>([3]) -> (); // 146
drop<EcPoint>([44]) -> (); // 147
drop<felt252>([5]) -> (); // 148
drop<core::integer::u256>([60]) -> (); // 149
struct_construct<Unit>() -> ([72]); // 150
enum_init<core::option::Option::<core::felt252>, 1>([72]) -> ([73]); // 151
store_temp<RangeCheck>([67]) -> ([67]); // 152
store_temp<EcOp>([1]) -> ([1]); // 153
store_temp<Bitwise>([26]) -> ([26]); // 154
store_temp<core::option::Option::<core::felt252>>([73]) -> ([73]); // 155
return([67], [1], [26], [73]); // 156
branch_align() -> (); // 157
dup<NonZero<core::integer::u256>>([71]) -> ([71], [74]); // 158
u256_guarantee_inv_mod_n([67], [60], [74]) { fallthrough([75], [76], [77], [78], [79], [80], [81], [82], [83], [84]) 419([85], [86], [87]) }; // 159
branch_align() -> (); // 160
u128_mul_guarantee_verify([75], [84]) -> ([88]); // 161
u128_mul_guarantee_verify([88], [83]) -> ([89]); // 162
u128_mul_guarantee_verify([89], [82]) -> ([90]); // 163
u128_mul_guarantee_verify([90], [81]) -> ([91]); // 164
u128_mul_guarantee_verify([91], [80]) -> ([92]); // 165
u128_mul_guarantee_verify([92], [79]) -> ([93]); // 166
u128_mul_guarantee_verify([93], [78]) -> ([94]); // 167
u128_mul_guarantee_verify([94], [77]) -> ([95]); // 168
unwrap_non_zero<core::integer::u256>([76]) -> ([96]); // 169
u128s_from_felt252([95], [5]) { fallthrough([97], [98]) 177([99], [100], [101]) }; // 170
branch_align() -> (); // 171
const_as_immediate<Const<u128, 0>>() -> ([102]); // 172
store_temp<RangeCheck>([97]) -> ([103]); // 173
store_temp<u128>([98]) -> ([104]); // 174
store_temp<u128>([102]) -> ([105]); // 175
jump() { 181() }; // 176
branch_align() -> (); // 177
store_temp<RangeCheck>([99]) -> ([103]); // 178
store_temp<u128>([101]) -> ([104]); // 179
store_temp<u128>([100]) -> ([105]); // 180
struct_construct<core::integer::u256>([104], [105]) -> ([106]); // 181
store_temp<RangeCheck>([103]) -> ([103]); // 182
store_temp<core::integer::u256>([106]) -> ([106]); // 183
dup<core::integer::u256>([96]) -> ([96], [107]); // 184
store_temp<core::integer::u256>([107]) -> ([107]); // 185
dup<NonZero<core::integer::u256>>([71]) -> ([71], [108]); // 186
store_temp<NonZero<core::integer::u256>>([108]) -> ([108]); // 187
function_call<user@core::math::u256_mul_mod_n>([103], [106], [107], [108]) -> ([109], [110]); // 188
struct_deconstruct<core::integer::u256>([110]) -> ([111], [112]); // 189
const_as_immediate<Const<u128, 10633823966279327296825105735305134080>>() -> ([113]); // 190
dup<u128>([113]) -> ([113], [114]); // 191
dup<u128>([112]) -> ([112], [115]); // 192
store_temp<u128>([114]) -> ([114]); // 193
u128_overflowing_sub([109], [114], [115]) { fallthrough([116], [117]) 402([118], [119]) }; // 194
branch_align() -> (); // 195
drop<u128>([117]) -> (); // 196
dup<u128>([112]) -> ([112], [120]); // 197
store_temp<RangeCheck>([116]) -> ([116]); // 198
u128_eq([120], [113]) { fallthrough() 202() }; // 199
branch_align() -> (); // 200
jump() { 217() }; // 201
branch_align() -> (); // 202
const_as_immediate<Const<u128, 0>>() -> ([121]); // 203
dup<u128>([111]) -> ([111], [122]); // 204
u128_eq([122], [121]) { fallthrough() 216() }; // 205
branch_align() -> (); // 206
drop<EcPoint>([49]) -> (); // 207
drop<EcPoint>([44]) -> (); // 208
drop<NonZero<core::integer::u256>>([71]) -> (); // 209
drop<core::integer::u256>([96]) -> (); // 210
drop<felt252>([3]) -> (); // 211
drop<u128>([111]) -> (); // 212
drop<u128>([112]) -> (); // 213
store_temp<RangeCheck>([116]) -> ([123]); // 214
jump() { 413() }; // 215
branch_align() -> (); // 216
u128_to_felt252([112]) -> ([124]); // 217
u128_to_felt252([111]) -> ([125]); // 218
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([126]); // 219
felt252_mul([124], [126]) -> ([127]); // 220
store_temp<felt252>([127]) -> ([127]); // 221
felt252_add([127], [125]) -> ([128]); // 222
store_temp<felt252>([128]) -> ([128]); // 223
u128s_from_felt252([116], [3]) { fallthrough([129], [130]) 231([131], [132], [133]) }; // 224
branch_align() -> (); // 225
const_as_immediate<Const<u128, 0>>() -> ([134]); // 226
store_temp<RangeCheck>([129]) -> ([135]); // 227
store_temp<u128>([130]) -> ([136]); // 228
store_temp<u128>([134]) -> ([137]); // 229
jump() { 235() }; // 230
branch_align() -> (); // 231
store_temp<RangeCheck>([131]) -> ([135]); // 232
store_temp<u128>([133]) -> ([136]); // 233
store_temp<u128>([132]) -> ([137]); // 234
struct_construct<core::integer::u256>([136], [137]) -> ([138]); // 235
store_temp<RangeCheck>([135]) -> ([135]); // 236
store_temp<core::integer::u256>([138]) -> ([138]); // 237
store_temp<core::integer::u256>([96]) -> ([96]); // 238
store_temp<NonZero<core::integer::u256>>([71]) -> ([71]); // 239
function_call<user@core::math::u256_mul_mod_n>([135], [138], [96], [71]) -> ([139], [140]); // 240
struct_deconstruct<core::integer::u256>([140]) -> ([141], [142]); // 241
const_as_immediate<Const<u128, 10633823966279327296825105735305134080>>() -> ([143]); // 242
dup<u128>([143]) -> ([143], [144]); // 243
dup<u128>([142]) -> ([142], [145]); // 244
store_temp<u128>([144]) -> ([144]); // 245
u128_overflowing_sub([139], [144], [145]) { fallthrough([146], [147]) 387([148], [149]) }; // 246
branch_align() -> (); // 247
drop<u128>([147]) -> (); // 248
dup<u128>([142]) -> ([142], [150]); // 249
store_temp<RangeCheck>([146]) -> ([146]); // 250
u128_eq([150], [143]) { fallthrough() 254() }; // 251
branch_align() -> (); // 252
jump() { 267() }; // 253
branch_align() -> (); // 254
const_as_immediate<Const<u128, 0>>() -> ([151]); // 255
dup<u128>([141]) -> ([141], [152]); // 256
u128_eq([152], [151]) { fallthrough() 266() }; // 257
branch_align() -> (); // 258
drop<EcPoint>([49]) -> (); // 259
drop<felt252>([128]) -> (); // 260
drop<EcPoint>([44]) -> (); // 261
drop<u128>([141]) -> (); // 262
drop<u128>([142]) -> (); // 263
store_temp<RangeCheck>([146]) -> ([153]); // 264
jump() { 396() }; // 265
branch_align() -> (); // 266
u128_to_felt252([142]) -> ([154]); // 267
u128_to_felt252([141]) -> ([155]); // 268
const_as_immediate<Const<felt252, 340282366920938463463374607431768211456>>() -> ([156]); // 269
felt252_mul([154], [156]) -> ([157]); // 270
store_temp<felt252>([157]) -> ([157]); // 271
felt252_add([157], [155]) -> ([158]); // 272
dup<EcPoint>([44]) -> ([44], [159]); // 273
store_temp<felt252>([158]) -> ([158]); // 274
ec_point_is_zero([159]) { fallthrough() 281([160]) }; // 275
branch_align() -> (); // 276
drop<felt252>([128]) -> (); // 277
store_temp<EcOp>([1]) -> ([161]); // 278
store_temp<EcPoint>([44]) -> ([162]); // 279
jump() { 297() }; // 280
branch_align() -> (); // 281
drop<EcPoint>([44]) -> (); // 282
ec_state_init() -> ([163]); // 283
ec_state_add_mul([1], [163], [128], [160]) -> ([164], [165]); // 284
store_temp<EcState>([165]) -> ([165]); // 285
store_temp<EcOp>([164]) -> ([164]); // 286
ec_state_try_finalize_nz([165]) { fallthrough([166]) 293() }; // 287
branch_align() -> (); // 288
unwrap_non_zero<EcPoint>([166]) -> ([167]); // 289
store_temp<EcOp>([164]) -> ([161]); // 290
store_temp<EcPoint>([167]) -> ([162]); // 291
jump() { 297() }; // 292
branch_align() -> (); // 293
ec_point_zero() -> ([168]); // 294
store_temp<EcOp>([164]) -> ([161]); // 295
store_temp<EcPoint>([168]) -> ([162]); // 296
dup<EcPoint>([49]) -> ([49], [169]); // 297
ec_point_is_zero([169]) { fallthrough() 304([170]) }; // 298
branch_align() -> (); // 299
drop<felt252>([158]) -> (); // 300
store_temp<EcOp>([161]) -> ([171]); // 301
store_temp<EcPoint>([49]) -> ([172]); // 302
jump() { 320() }; // 303
branch_align() -> (); // 304
drop<EcPoint>([49]) -> (); // 305
ec_state_init() -> ([173]); // 306
ec_state_add_mul([161], [173], [158], [170]) -> ([174], [175]); // 307
store_temp<EcState>([175]) -> ([175]); // 308
store_temp<EcOp>([174]) -> ([174]); // 309
ec_state_try_finalize_nz([175]) { fallthrough([176]) 316() }; // 310
branch_align() -> (); // 311
unwrap_non_zero<EcPoint>([176]) -> ([177]); // 312
store_temp<EcOp>([174]) -> ([171]); // 313
store_temp<EcPoint>([177]) -> ([172]); // 314
jump() { 320() }; // 315
branch_align() -> (); // 316
ec_point_zero() -> ([178]); // 317
store_temp<EcOp>([174]) -> ([171]); // 318
store_temp<EcPoint>([178]) -> ([172]); // 319
dup<EcPoint>([172]) -> ([172], [179]); // 320
ec_point_is_zero([179]) { fallthrough() 327([180]) }; // 321
branch_align() -> (); // 322
struct_construct<Unit>() -> ([181]); // 323
enum_init<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>, 1>([181]) -> ([182]); // 324
store_temp<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>([182]) -> ([183]); // 325
jump() { 330() }; // 326
branch_align() -> (); // 327
enum_init<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>, 0>([180]) -> ([184]); // 328
store_temp<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>([184]) -> ([183]); // 329
snapshot_take<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>([183]) -> ([185], [186]); // 330
drop<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>([185]) -> (); // 331
enum_match<core::option::Option::<core::zeroable::NonZero::<core::ec::EcPoint>>>([186]) { fallthrough([187]) 365([188]) }; // 332
branch_align() -> (); // 333
drop<NonZero<EcPoint>>([187]) -> (); // 334
ec_neg([172]) -> ([189]); // 335
dup<EcPoint>([162]) -> ([162], [190]); // 336
store_temp<EcPoint>([189]) -> ([189]); // 337
ec_point_is_zero([190]) { fallthrough() 343([191]) }; // 338
branch_align() -> (); // 339
drop<EcPoint>([162]) -> (); // 340
store_temp<EcPoint>([189]) -> ([192]); // 341
jump() { 369() }; // 342
branch_align() -> (); // 343
ec_point_is_zero([189]) { fallthrough() 349([193]) }; // 344
branch_align() -> (); // 345
drop<NonZero<EcPoint>>([191]) -> (); // 346
store_temp<EcPoint>([162]) -> ([192]); // 347
jump() { 369() }; // 348
branch_align() -> (); // 349
drop<EcPoint>([162]) -> (); // 350
ec_state_init() -> ([194]); // 351
ec_state_add([194], [191]) -> ([195]); // 352
store_temp<EcState>([195]) -> ([195]); // 353
ec_state_add([195], [193]) -> ([196]); // 354
store_temp<EcState>([196]) -> ([196]); // 355
ec_state_try_finalize_nz([196]) { fallthrough([197]) 361() }; // 356
branch_align() -> (); // 357
unwrap_non_zero<EcPoint>([197]) -> ([198]); // 358
store_temp<EcPoint>([198]) -> ([192]); // 359
jump() { 369() }; // 360
branch_align() -> (); // 361
ec_point_zero() -> ([199]); // 362
store_temp<EcPoint>([199]) -> ([192]); // 363
jump() { 369() }; // 364
branch_align() -> (); // 365
drop<Unit>([188]) -> (); // 366
drop<EcPoint>([172]) -> (); // 367
store_temp<EcPoint>([162]) -> ([192]); // 368
ec_point_is_zero([192]) { fallthrough() 378([200]) }; // 369
branch_align() -> (); // 370
struct_construct<Unit>() -> ([201]); // 371
enum_init<core::option::Option::<core::felt252>, 1>([201]) -> ([202]); // 372
store_temp<RangeCheck>([146]) -> ([146]); // 373
store_temp<EcOp>([171]) -> ([171]); // 374
store_temp<Bitwise>([26]) -> ([26]); // 375
store_temp<core::option::Option::<core::felt252>>([202]) -> ([202]); // 376
return([146], [171], [26], [202]); // 377
branch_align() -> (); // 378
ec_point_unwrap([200]) -> ([203], [204]); // 379
drop<felt252>([204]) -> (); // 380
enum_init<core::option::Option::<core::felt252>, 0>([203]) -> ([205]); // 381
store_temp<RangeCheck>([146]) -> ([146]); // 382
store_temp<EcOp>([171]) -> ([171]); // 383
store_temp<Bitwise>([26]) -> ([26]); // 384
store_temp<core::option::Option::<core::felt252>>([205]) -> ([205]); // 385
return([146], [171], [26], [205]); // 386
branch_align() -> (); // 387
drop<u128>([149]) -> (); // 388
drop<u128>([143]) -> (); // 389
drop<EcPoint>([49]) -> (); // 390
drop<felt252>([128]) -> (); // 391
drop<EcPoint>([44]) -> (); // 392
drop<u128>([141]) -> (); // 393
drop<u128>([142]) -> (); // 394
store_temp<RangeCheck>([148]) -> ([153]); // 395
struct_construct<Unit>() -> ([206]); // 396
enum_init<core::option::Option::<core::felt252>, 1>([206]) -> ([207]); // 397
store_temp<EcOp>([1]) -> ([1]); // 398
store_temp<Bitwise>([26]) -> ([26]); // 399
store_temp<core::option::Option::<core::felt252>>([207]) -> ([207]); // 400
return([153], [1], [26], [207]); // 401
branch_align() -> (); // 402
drop<u128>([119]) -> (); // 403
drop<EcPoint>([49]) -> (); // 404
drop<u128>([113]) -> (); // 405
drop<EcPoint>([44]) -> (); // 406
drop<NonZero<core::integer::u256>>([71]) -> (); // 407
drop<core::integer::u256>([96]) -> (); // 408
drop<felt252>([3]) -> (); // 409
drop<u128>([111]) -> (); // 410
drop<u128>([112]) -> (); // 411
store_temp<RangeCheck>([118]) -> ([123]); // 412
struct_construct<Unit>() -> ([208]); // 413
enum_init<core::option::Option::<core::felt252>, 1>([208]) -> ([209]); // 414
store_temp<EcOp>([1]) -> ([1]); // 415
store_temp<Bitwise>([26]) -> ([26]); // 416
store_temp<core::option::Option::<core::felt252>>([209]) -> ([209]); // 417
return([123], [1], [26], [209]); // 418
branch_align() -> (); // 419
drop<EcPoint>([49]) -> (); // 420
drop<felt252>([3]) -> (); // 421
drop<EcPoint>([44]) -> (); // 422
drop<NonZero<core::integer::u256>>([71]) -> (); // 423
drop<felt252>([5]) -> (); // 424
u128_mul_guarantee_verify([85], [87]) -> ([210]); // 425
u128_mul_guarantee_verify([210], [86]) -> ([211]); // 426
struct_construct<Unit>() -> ([212]); // 427
enum_init<core::option::Option::<core::felt252>, 1>([212]) -> ([213]); // 428
store_temp<RangeCheck>([211]) -> ([211]); // 429
store_temp<EcOp>([1]) -> ([1]); // 430
store_temp<Bitwise>([26]) -> ([26]); // 431
store_temp<core::option::Option::<core::felt252>>([213]) -> ([213]); // 432
return([211], [1], [26], [213]); // 433
branch_align() -> (); // 434
drop<felt252>([5]) -> (); // 435
drop<felt252>([3]) -> (); // 436
drop<EcPoint>([44]) -> (); // 437
drop<felt252>([4]) -> (); // 438
struct_construct<Unit>() -> ([214]); // 439
enum_init<core::option::Option::<core::felt252>, 1>([214]) -> ([215]); // 440
store_temp<RangeCheck>([23]) -> ([23]); // 441
store_temp<EcOp>([1]) -> ([1]); // 442
store_temp<Bitwise>([26]) -> ([26]); // 443
store_temp<core::option::Option::<core::felt252>>([215]) -> ([215]); // 444
return([23], [1], [26], [215]); // 445
branch_align() -> (); // 446
drop<felt252>([4]) -> (); // 447
drop<felt252>([5]) -> (); // 448
drop<core::bool>([6]) -> (); // 449
drop<felt252>([3]) -> (); // 450
struct_construct<Unit>() -> ([216]); // 451
enum_init<core::option::Option::<core::felt252>, 1>([216]) -> ([217]); // 452
store_temp<RangeCheck>([10]) -> ([10]); // 453
store_temp<EcOp>([1]) -> ([1]); // 454
store_temp<Bitwise>([2]) -> ([2]); // 455
store_temp<core::option::Option::<core::felt252>>([217]) -> ([217]); // 456
return([10], [1], [2], [217]); // 457
struct_deconstruct<core::integer::u256>([1]) -> ([4], [5]); // 458
struct_deconstruct<core::integer::u256>([2]) -> ([6], [7]); // 459
dup<u128>([4]) -> ([4], [8]); // 460
dup<u128>([6]) -> ([6], [9]); // 461
u128_guarantee_mul([8], [9]) -> ([10], [11], [12]); // 462
u128_mul_guarantee_verify([0], [12]) -> ([13]); // 463
dup<u128>([7]) -> ([7], [14]); // 464
u128_guarantee_mul([4], [14]) -> ([15], [16], [17]); // 465
u128_mul_guarantee_verify([13], [17]) -> ([18]); // 466
u128_overflowing_add([18], [10], [16]) { fallthrough([19], [20]) 474([21], [22]) }; // 467
branch_align() -> (); // 468
const_as_immediate<Const<u128, 0>>() -> ([23]); // 469
store_temp<RangeCheck>([19]) -> ([24]); // 470
store_temp<u128>([20]) -> ([25]); // 471
store_temp<u128>([23]) -> ([26]); // 472
jump() { 479() }; // 473
branch_align() -> (); // 474
const_as_immediate<Const<u128, 1>>() -> ([27]); // 475
store_temp<RangeCheck>([21]) -> ([24]); // 476
store_temp<u128>([22]) -> ([25]); // 477
store_temp<u128>([27]) -> ([26]); // 478
dup<u128>([5]) -> ([5], [28]); // 479
u128_guarantee_mul([28], [6]) -> ([29], [30], [31]); // 480
u128_mul_guarantee_verify([24], [31]) -> ([32]); // 481
u128_overflowing_add([32], [25], [30]) { fallthrough([33], [34]) 489([35], [36]) }; // 482
branch_align() -> (); // 483
const_as_immediate<Const<u128, 0>>() -> ([37]); // 484
store_temp<RangeCheck>([33]) -> ([38]); // 485
store_temp<u128>([34]) -> ([39]); // 486
store_temp<u128>([37]) -> ([40]); // 487
jump() { 494() }; // 488
branch_align() -> (); // 489
const_as_immediate<Const<u128, 1>>() -> ([41]); // 490
store_temp<RangeCheck>([35]) -> ([38]); // 491
store_temp<u128>([36]) -> ([39]); // 492
store_temp<u128>([41]) -> ([40]); // 493
u128_overflowing_add([38], [15], [29]) { fallthrough([42], [43]) 501([44], [45]) }; // 494
branch_align() -> (); // 495
const_as_immediate<Const<u128, 0>>() -> ([46]); // 496
store_temp<RangeCheck>([42]) -> ([47]); // 497
store_temp<u128>([43]) -> ([48]); // 498
store_temp<u128>([46]) -> ([49]); // 499
jump() { 506() }; // 500
branch_align() -> (); // 501
const_as_immediate<Const<u128, 1>>() -> ([50]); // 502
store_temp<RangeCheck>([44]) -> ([47]); // 503
store_temp<u128>([45]) -> ([48]); // 504
store_temp<u128>([50]) -> ([49]); // 505
u128_guarantee_mul([5], [7]) -> ([51], [52], [53]); // 506
u128_mul_guarantee_verify([47], [53]) -> ([54]); // 507
u128_overflowing_add([54], [51], [49]) { fallthrough([55], [56]) 513([57], [58]) }; // 508
branch_align() -> (); // 509
store_temp<RangeCheck>([55]) -> ([59]); // 510
store_temp<u128>([56]) -> ([60]); // 511
jump() { 516() }; // 512
branch_align() -> (); // 513
store_temp<RangeCheck>([57]) -> ([59]); // 514
store_temp<u128>([58]) -> ([60]); // 515
u128_overflowing_add([59], [48], [52]) { fallthrough([61], [62]) 523([63], [64]) }; // 516
branch_align() -> (); // 517
const_as_immediate<Const<u128, 0>>() -> ([65]); // 518
store_temp<RangeCheck>([61]) -> ([66]); // 519
store_temp<u128>([62]) -> ([67]); // 520
store_temp<u128>([65]) -> ([68]); // 521
jump() { 528() }; // 522
branch_align() -> (); // 523
const_as_immediate<Const<u128, 1>>() -> ([69]); // 524
store_temp<RangeCheck>([63]) -> ([66]); // 525
store_temp<u128>([64]) -> ([67]); // 526
store_temp<u128>([69]) -> ([68]); // 527
u128_overflowing_add([66], [60], [68]) { fallthrough([70], [71]) 533([72], [73]) }; // 528
branch_align() -> (); // 529
store_temp<RangeCheck>([70]) -> ([74]); // 530
store_temp<u128>([71]) -> ([75]); // 531
jump() { 536() }; // 532
branch_align() -> (); // 533
store_temp<RangeCheck>([72]) -> ([74]); // 534
store_temp<u128>([73]) -> ([75]); // 535
u128_overflowing_add([74], [26], [40]) { fallthrough([76], [77]) 541([78], [79]) }; // 536
branch_align() -> (); // 537
store_temp<RangeCheck>([76]) -> ([80]); // 538
store_temp<u128>([77]) -> ([81]); // 539
jump() { 544() }; // 540
branch_align() -> (); // 541
store_temp<RangeCheck>([78]) -> ([80]); // 542
store_temp<u128>([79]) -> ([81]); // 543
u128_overflowing_add([80], [67], [81]) { fallthrough([82], [83]) 551([84], [85]) }; // 544
branch_align() -> (); // 545
const_as_immediate<Const<u128, 0>>() -> ([86]); // 546
store_temp<RangeCheck>([82]) -> ([87]); // 547
store_temp<u128>([83]) -> ([88]); // 548
store_temp<u128>([86]) -> ([89]); // 549
jump() { 556() }; // 550
branch_align() -> (); // 551
const_as_immediate<Const<u128, 1>>() -> ([90]); // 552
store_temp<RangeCheck>([84]) -> ([87]); // 553
store_temp<u128>([85]) -> ([88]); // 554
store_temp<u128>([90]) -> ([89]); // 555
u128_overflowing_add([87], [75], [89]) { fallthrough([91], [92]) 561([93], [94]) }; // 556
branch_align() -> (); // 557
store_temp<RangeCheck>([91]) -> ([95]); // 558
store_temp<u128>([92]) -> ([96]); // 559
jump() { 564() }; // 560
branch_align() -> (); // 561
store_temp<RangeCheck>([93]) -> ([95]); // 562
store_temp<u128>([94]) -> ([96]); // 563
struct_construct<core::integer::u512>([11], [39], [88], [96]) -> ([97]); // 564
store_temp<core::integer::u512>([97]) -> ([97]); // 565
u512_safe_divmod_by_u256([95], [97], [3]) -> ([98], [99], [100], [101], [102], [103], [104], [105]); // 566
drop<core::integer::u512>([99]) -> (); // 567
u128_mul_guarantee_verify([98], [105]) -> ([106]); // 568
u128_mul_guarantee_verify([106], [104]) -> ([107]); // 569
u128_mul_guarantee_verify([107], [103]) -> ([108]); // 570
u128_mul_guarantee_verify([108], [102]) -> ([109]); // 571
u128_mul_guarantee_verify([109], [101]) -> ([110]); // 572
store_temp<RangeCheck>([110]) -> ([110]); // 573
store_temp<core::integer::u256>([100]) -> ([100]); // 574
return([110], [100]); // 575

ecdsa_recover::ecdsa_recover::main@0([0]: RangeCheck, [1]: EcOp, [2]: Bitwise) -> (RangeCheck, EcOp, Bitwise, core::panics::PanicResult::<(core::felt252,)>);
core::ecdsa::recover_public_key@36([0]: RangeCheck, [1]: EcOp, [2]: Bitwise, [3]: felt252, [4]: felt252, [5]: felt252, [6]: core::bool) -> (RangeCheck, EcOp, Bitwise, core::option::Option::<core::felt252>);
core::math::u256_mul_mod_n@458([0]: RangeCheck, [1]: core::integer::u256, [2]: core::integer::u256, [3]: NonZero<core::integer::u256>) -> (RangeCheck, core::integer::u256);
