type u32 = u32 [storable: true, drop: true, dup: true, zero_sized: false];
type Unit = Struct<ut@Tuple> [storable: true, drop: true, dup: true, zero_sized: true];
type RangeCheck = RangeCheck [storable: true, drop: false, dup: false, zero_sized: false];

libfunc dup<u32> = dup<u32>;
libfunc u32_overflowing_sub = u32_overflowing_sub;
libfunc branch_align = branch_align;
libfunc drop<u32> = drop<u32>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc jump = jump;

dup<u32>([2]) -> ([2], [4]); // 0
u32_overflowing_sub([0], [1], [4]) { fallthrough([5], [6]) 6([7], [8]) }; // 1
branch_align() -> (); // 2
drop<u32>([6]) -> (); // 3
store_temp<RangeCheck>([5]) -> ([9]); // 4
jump() { 9() }; // 5
branch_align() -> (); // 6
drop<u32>([8]) -> (); // 7
store_temp<RangeCheck>([7]) -> ([9]); // 8
u32_overflowing_sub([9], [2], [3]) { fallthrough([10], [11]) 14([12], [13]) }; // 9
branch_align() -> (); // 10
drop<u32>([11]) -> (); // 11
store_temp<RangeCheck>([10]) -> ([10]); // 12
return([10]); // 13
branch_align() -> (); // 14
drop<u32>([13]) -> (); // 15
store_temp<RangeCheck>([12]) -> ([12]); // 16
return([12]); // 17

cairo_casm_json::test_less_than::main@0([0]: RangeCheck, [1]: u32, [2]: u32, [3]: u32) -> (RangeCheck);
